# Generated from AdaGrammar.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,354,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,5,22,240,8,22,10,22,12,22,243,9,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,
        29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
        33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
        44,1,45,1,45,1,45,1,46,4,46,302,8,46,11,46,12,46,303,1,47,4,47,307,
        8,47,11,47,12,47,308,1,47,1,47,4,47,313,8,47,11,47,12,47,314,1,48,
        1,48,1,48,1,48,1,49,1,49,5,49,323,8,49,10,49,12,49,326,9,49,1,49,
        1,49,1,50,1,50,1,50,1,50,3,50,334,8,50,1,50,1,50,1,50,1,50,1,51,
        1,51,3,51,342,8,51,1,51,1,51,1,51,1,51,1,52,4,52,349,8,52,11,52,
        12,52,350,1,52,1,52,1,324,0,53,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,1,0,4,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,361,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,1,107,1,0,0,0,3,115,1,0,0,0,5,121,1,0,0,0,7,125,1,0,0,0,
        9,128,1,0,0,0,11,133,1,0,0,0,13,143,1,0,0,0,15,152,1,0,0,0,17,155,
        1,0,0,0,19,160,1,0,0,0,21,166,1,0,0,0,23,169,1,0,0,0,25,176,1,0,
        0,0,27,181,1,0,0,0,29,188,1,0,0,0,31,193,1,0,0,0,33,200,1,0,0,0,
        35,205,1,0,0,0,37,210,1,0,0,0,39,219,1,0,0,0,41,226,1,0,0,0,43,231,
        1,0,0,0,45,237,1,0,0,0,47,244,1,0,0,0,49,246,1,0,0,0,51,248,1,0,
        0,0,53,250,1,0,0,0,55,252,1,0,0,0,57,254,1,0,0,0,59,257,1,0,0,0,
        61,259,1,0,0,0,63,261,1,0,0,0,65,264,1,0,0,0,67,267,1,0,0,0,69,271,
        1,0,0,0,71,274,1,0,0,0,73,278,1,0,0,0,75,280,1,0,0,0,77,282,1,0,
        0,0,79,284,1,0,0,0,81,286,1,0,0,0,83,288,1,0,0,0,85,290,1,0,0,0,
        87,292,1,0,0,0,89,294,1,0,0,0,91,297,1,0,0,0,93,301,1,0,0,0,95,306,
        1,0,0,0,97,316,1,0,0,0,99,320,1,0,0,0,101,329,1,0,0,0,103,339,1,
        0,0,0,105,348,1,0,0,0,107,108,5,112,0,0,108,109,5,114,0,0,109,110,
        5,111,0,0,110,111,5,103,0,0,111,112,5,114,0,0,112,113,5,97,0,0,113,
        114,5,109,0,0,114,2,1,0,0,0,115,116,5,98,0,0,116,117,5,101,0,0,117,
        118,5,103,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,4,1,0,0,0,
        121,122,5,101,0,0,122,123,5,110,0,0,123,124,5,100,0,0,124,6,1,0,
        0,0,125,126,5,105,0,0,126,127,5,102,0,0,127,8,1,0,0,0,128,129,5,
        101,0,0,129,130,5,108,0,0,130,131,5,115,0,0,131,132,5,101,0,0,132,
        10,1,0,0,0,133,134,5,112,0,0,134,135,5,114,0,0,135,136,5,111,0,0,
        136,137,5,99,0,0,137,138,5,101,0,0,138,139,5,100,0,0,139,140,5,117,
        0,0,140,141,5,114,0,0,141,142,5,101,0,0,142,12,1,0,0,0,143,144,5,
        102,0,0,144,145,5,117,0,0,145,146,5,110,0,0,146,147,5,99,0,0,147,
        148,5,116,0,0,148,149,5,105,0,0,149,150,5,111,0,0,150,151,5,110,
        0,0,151,14,1,0,0,0,152,153,5,105,0,0,153,154,5,115,0,0,154,16,1,
        0,0,0,155,156,5,116,0,0,156,157,5,121,0,0,157,158,5,112,0,0,158,
        159,5,101,0,0,159,18,1,0,0,0,160,161,5,97,0,0,161,162,5,114,0,0,
        162,163,5,114,0,0,163,164,5,97,0,0,164,165,5,121,0,0,165,20,1,0,
        0,0,166,167,5,111,0,0,167,168,5,102,0,0,168,22,1,0,0,0,169,170,5,
        114,0,0,170,171,5,101,0,0,171,172,5,99,0,0,172,173,5,111,0,0,173,
        174,5,114,0,0,174,175,5,100,0,0,175,24,1,0,0,0,176,177,5,119,0,0,
        177,178,5,105,0,0,178,179,5,116,0,0,179,180,5,104,0,0,180,26,1,0,
        0,0,181,182,5,115,0,0,182,183,5,101,0,0,183,184,5,108,0,0,184,185,
        5,101,0,0,185,186,5,99,0,0,186,187,5,116,0,0,187,28,1,0,0,0,188,
        189,5,119,0,0,189,190,5,104,0,0,190,191,5,101,0,0,191,192,5,110,
        0,0,192,30,1,0,0,0,193,194,5,111,0,0,194,195,5,116,0,0,195,196,5,
        104,0,0,196,197,5,101,0,0,197,198,5,114,0,0,198,199,5,115,0,0,199,
        32,1,0,0,0,200,201,5,108,0,0,201,202,5,111,0,0,202,203,5,111,0,0,
        203,204,5,112,0,0,204,34,1,0,0,0,205,206,5,101,0,0,206,207,5,120,
        0,0,207,208,5,105,0,0,208,209,5,116,0,0,209,36,1,0,0,0,210,211,5,
        99,0,0,211,212,5,111,0,0,212,213,5,110,0,0,213,214,5,116,0,0,214,
        215,5,105,0,0,215,216,5,110,0,0,216,217,5,117,0,0,217,218,5,101,
        0,0,218,38,1,0,0,0,219,220,5,114,0,0,220,221,5,101,0,0,221,222,5,
        116,0,0,222,223,5,117,0,0,223,224,5,114,0,0,224,225,5,110,0,0,225,
        40,1,0,0,0,226,227,5,116,0,0,227,228,5,104,0,0,228,229,5,101,0,0,
        229,230,5,110,0,0,230,42,1,0,0,0,231,232,5,119,0,0,232,233,5,104,
        0,0,233,234,5,105,0,0,234,235,5,108,0,0,235,236,5,101,0,0,236,44,
        1,0,0,0,237,241,7,0,0,0,238,240,7,1,0,0,239,238,1,0,0,0,240,243,
        1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,46,1,0,0,0,243,241,1,
        0,0,0,244,245,5,43,0,0,245,48,1,0,0,0,246,247,5,45,0,0,247,50,1,
        0,0,0,248,249,5,42,0,0,249,52,1,0,0,0,250,251,5,47,0,0,251,54,1,
        0,0,0,252,253,5,61,0,0,253,56,1,0,0,0,254,255,5,47,0,0,255,256,5,
        61,0,0,256,58,1,0,0,0,257,258,5,60,0,0,258,60,1,0,0,0,259,260,5,
        62,0,0,260,62,1,0,0,0,261,262,5,60,0,0,262,263,5,61,0,0,263,64,1,
        0,0,0,264,265,5,62,0,0,265,266,5,61,0,0,266,66,1,0,0,0,267,268,5,
        97,0,0,268,269,5,110,0,0,269,270,5,100,0,0,270,68,1,0,0,0,271,272,
        5,111,0,0,272,273,5,114,0,0,273,70,1,0,0,0,274,275,5,110,0,0,275,
        276,5,111,0,0,276,277,5,116,0,0,277,72,1,0,0,0,278,279,5,44,0,0,
        279,74,1,0,0,0,280,281,5,59,0,0,281,76,1,0,0,0,282,283,5,58,0,0,
        283,78,1,0,0,0,284,285,5,40,0,0,285,80,1,0,0,0,286,287,5,41,0,0,
        287,82,1,0,0,0,288,289,5,91,0,0,289,84,1,0,0,0,290,291,5,93,0,0,
        291,86,1,0,0,0,292,293,5,46,0,0,293,88,1,0,0,0,294,295,5,46,0,0,
        295,296,5,46,0,0,296,90,1,0,0,0,297,298,5,61,0,0,298,299,5,62,0,
        0,299,92,1,0,0,0,300,302,7,2,0,0,301,300,1,0,0,0,302,303,1,0,0,0,
        303,301,1,0,0,0,303,304,1,0,0,0,304,94,1,0,0,0,305,307,7,2,0,0,306,
        305,1,0,0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
        310,1,0,0,0,310,312,5,46,0,0,311,313,7,2,0,0,312,311,1,0,0,0,313,
        314,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,96,1,0,0,0,316,317,
        5,39,0,0,317,318,9,0,0,0,318,319,5,39,0,0,319,98,1,0,0,0,320,324,
        5,34,0,0,321,323,9,0,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,325,
        1,0,0,0,324,322,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,
        5,34,0,0,328,100,1,0,0,0,329,330,5,45,0,0,330,331,5,45,0,0,331,333,
        1,0,0,0,332,334,9,0,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,335,
        1,0,0,0,335,336,5,10,0,0,336,337,1,0,0,0,337,338,6,50,0,0,338,102,
        1,0,0,0,339,341,5,47,0,0,340,342,9,0,0,0,341,340,1,0,0,0,341,342,
        1,0,0,0,342,343,1,0,0,0,343,344,5,47,0,0,344,345,1,0,0,0,345,346,
        6,51,0,0,346,104,1,0,0,0,347,349,7,3,0,0,348,347,1,0,0,0,349,350,
        1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,
        6,52,0,0,353,106,1,0,0,0,9,0,241,303,308,314,324,333,341,350,1,6,
        0,0
    ]

class AdaGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    BEGIN = 2
    END = 3
    IF = 4
    ELSE = 5
    PROCEDURE = 6
    FUNCTION = 7
    IS = 8
    TYPE = 9
    ARRAY = 10
    OF = 11
    RECORD = 12
    WITH = 13
    SELECT = 14
    WHEN = 15
    OTHERS = 16
    LOOP = 17
    EXIT = 18
    CONTINUE = 19
    RETURN = 20
    THEN = 21
    WHILE = 22
    ID = 23
    ADD = 24
    SUB = 25
    MUL = 26
    DIV = 27
    EQUALS = 28
    NOTEQUALS = 29
    LT = 30
    GT = 31
    LTE = 32
    GTE = 33
    AND = 34
    OR = 35
    NOT = 36
    COMMA = 37
    SEMICOLON = 38
    COLON = 39
    LPAREN = 40
    RPAREN = 41
    LEFT_BRACKET = 42
    RIGHT_BRACKET = 43
    PERIOD = 44
    DOT_DOT = 45
    ARROW = 46
    INT = 47
    FLOAT = 48
    CHAR = 49
    STRING = 50
    LINE_COMMENT = 51
    BLOCK_COMMENT = 52
    WS = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'begin'", "'end'", "'if'", "'else'", "'procedure'", 
            "'function'", "'is'", "'type'", "'array'", "'of'", "'record'", 
            "'with'", "'select'", "'when'", "'others'", "'loop'", "'exit'", 
            "'continue'", "'return'", "'then'", "'while'", "'+'", "'-'", 
            "'*'", "'/'", "'='", "'/='", "'<'", "'>'", "'<='", "'>='", "'and'", 
            "'or'", "'not'", "','", "';'", "':'", "'('", "')'", "'['", "']'", 
            "'.'", "'..'", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "BEGIN", "END", "IF", "ELSE", "PROCEDURE", "FUNCTION", 
            "IS", "TYPE", "ARRAY", "OF", "RECORD", "WITH", "SELECT", "WHEN", 
            "OTHERS", "LOOP", "EXIT", "CONTINUE", "RETURN", "THEN", "WHILE", 
            "ID", "ADD", "SUB", "MUL", "DIV", "EQUALS", "NOTEQUALS", "LT", 
            "GT", "LTE", "GTE", "AND", "OR", "NOT", "COMMA", "SEMICOLON", 
            "COLON", "LPAREN", "RPAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
            "PERIOD", "DOT_DOT", "ARROW", "INT", "FLOAT", "CHAR", "STRING", 
            "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "PROGRAM", "BEGIN", "END", "IF", "ELSE", "PROCEDURE", 
                  "FUNCTION", "IS", "TYPE", "ARRAY", "OF", "RECORD", "WITH", 
                  "SELECT", "WHEN", "OTHERS", "LOOP", "EXIT", "CONTINUE", 
                  "RETURN", "THEN", "WHILE", "ID", "ADD", "SUB", "MUL", 
                  "DIV", "EQUALS", "NOTEQUALS", "LT", "GT", "LTE", "GTE", 
                  "AND", "OR", "NOT", "COMMA", "SEMICOLON", "COLON", "LPAREN", 
                  "RPAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "PERIOD", "DOT_DOT", 
                  "ARROW", "INT", "FLOAT", "CHAR", "STRING", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "WS" ]

    grammarFileName = "AdaGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


